apiVersion: v1
data:
  config.yml: "global:\n smtp_smarthost: smtp.gmail.com:465\n smtp_from: alertmanager@hire.com\n
    smtp_auth_username: awspractice1999@gmail.com\n smtp_auth_password: 'saeqfawbjvhzbng'\n
    smtp_require_tls: false\ntemplates:\n- '/etc/alertmanager-templates/*.tmpl'\nroute:\n
    \ group_by: ['alertname', 'cluster', 'service']\n  group_wait: 30s\n  group_interval:
    30s\n  repeat_interval: 1m  \n  receiver: mail\n\nreceivers:\n - name: 'mail'\n
    \  email_configs:\n   - to: awspractice1999@gmail.com\n     smarthost: smtp.gmail.com:587\n
    \    \n     send_resolved: true"
kind: ConfigMap
metadata:
  name: alertmanager
  namespace: monitoring
---
apiVersion: v1
data:
  config.yml: |-
    global:
      # ResolveTimeout is the time after which an alert is declared resolved
      # if it has not been updated.
      resolve_timeout: 5m
      # The smarthost and SMTP sender used for mail notifications.
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'awspractice11@gmail.com'
      smtp_auth_username: 'awspractice11@gmail.com'
      smtp_auth_password: 'sEcur@9811AWS'
      # The API URL to use for Slack notifications.
      slack_api_url: 'https://hooks.slack.com/services/abc123'
      # # The auth token for Hipchat.
      # hipchat_auth_token: '1234556789'
      #
      # # Alternative host for Hipchat.
      # hipchat_url: 'https://hipchat.foobar.org/'
    # # The directory from which notification templates are read.
    templates:
    - '/etc/alertmanager-templates/*.tmpl'
    # The root route on which each incoming alert enters.
    route:
      # The labels by which incoming alerts are grouped together. For example,
      # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
      # be batched into a single group.
      group_by: ['alertname', 'cluster', 'service']
      # When a new group of alerts is created by an incoming alert, wait at
      # least 'group_wait' to send the initial notification.
      # This way ensures that you get multiple alerts for the same group that start
      # firing shortly after another are batched together on the first
      # notification.
      group_wait: 30s
      # When the first notification was sent, wait 'group_interval' to send a batch
      # of new alerts that started firing for that group.
      group_interval: 5m
      # If an alert has successfully been sent, wait 'repeat_interval' to
      # resend them.
      #repeat_interval: 1m
      repeat_interval: 15m
      # A default receiver
      # If an alert isn't caught by a route, send it to default.
      receiver: default
      # All the above attributes are inherited by all child routes and can
      # overwritten on each.
      # The child route trees.
      routes:
      # Send severity=slack alerts to slack.
      - match:
          severity: slack
        receiver: slack_alert
      - match:
          severity: email
        receiver: slack_alert
    #   receiver: email_alert
    receivers:
    - name: 'default'
      slack_configs:
      - channel: '#devops'
        text: '<!channel>{{ template "slack.devops.text" . }}'
        send_resolved: true
    - name: 'slack_alert'
      slack_configs:
      - channel: '#devops'
        send_resolved: true
        # # Whether or not to notify about resolved alerts.
        # send_resolved: true
        #
        # # The Slack webhook URL.
        # [ api_url: <string> | default = global.slack_api_url ]
        #
        # # The channel or user to send notifications to.
        # channel: <tmpl_string>
        #
        # # API request data as defined by the Slack webhook API.
        # [ color: <tmpl_string> | default = '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}' ]
        # [ username: <tmpl_string> | default = '{{ template "slack.default.username" . }}'
        # [ title: <tmpl_string> | default = '{{ template "slack.default.title" . }}' ]
        # [ title_link: <tmpl_string> | default = '{{ template "slack.default.titlelink" . }}' ]
        # [ icon_emoji: <tmpl_string> ]
        # [ pretext: <tmpl_string> | default = '{{ template "slack.default.pretext" . }}' ]
        # [ text: <tmpl_string> | default = '{{ template "slack.default.text" . }}' ]
        # [ fallback: <tmpl_string> | default = '{{ template "slack.default.fallback" . }}' ]
    - name: 'email_alert'
      email_configs:
      - to: 'awspractice11@gmail.com'
kind: ConfigMap
metadata:
  name: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/scrape: "true"
  labels:
    name: alertmanager
    namespace: monitoring
  name: alertmanager
spec:
  ports:
  - name: alertmanager
    port: 9093
    protocol: TCP
    targetPort: 9093
  selector:
    app: alertmanager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
      name: alertmanager
    spec:
      containers:
      - args:
        - --config.file=/etc/alertmanager/config.yml
        - --storage.path=/alertmanager
        image: prom/alertmanager:v0.20.0
        name: alertmanager
        ports:
        - containerPort: 9093
          name: alertmanager
        volumeMounts:
        - mountPath: /etc/alertmanager
          name: config-volume
        - mountPath: /alertmanager
          name: alertmanager
      volumes:
      - configMap:
          name: alertmanager
        name: config-volume
      - emptyDir: {}
        name: alertmanager
