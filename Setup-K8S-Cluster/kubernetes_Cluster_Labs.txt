##Kubernetes Cluster Lab setup

##Labs Hardware requirements:  2GB RAM and 2vCPU

## Perform These commands on Master and Nodes servers

## Install CentOS 7 OS on all servers and keep hardware simillar among all master and nodes servers.

# Update CentOS7 :
yum update

##Add master and nodes dns name and IPs in "etc/hosts". You should add theses entry under all kuberetes cluster nodes
vi /etc/hosts
192.168.56.10 master
192.168.56.20 node1
192.168.56.30 node2


# Disable selinux
setenforce 0
sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

# Stop firewalld aur keep it on if you know how to operate firewall
systemctl stop firewalld
systemctl disable firewalld

#Enable br_netfilter Kernel Module: The br_netfilter module is required for kubernetes installation. Enable this kernel module so that the packets traversing the bridge are processed by iptables for filtering and for port forwarding, and the kubernetes pods across the cluster can communicate with each other.

modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

# Disable SWAP
swapoff -a
- Also disable from "/etc/fstab"   # sed -e '/swap/ s/^#*/#/' -i /etc/fstab

# Install Docker CE

yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install -y docker-ce

#Install Kubernetes
# Add repo for kubernetes
========================

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
=============================

yum install -y kubelet kubeadm kubectl

#Change the cgroup-driver from cgroup to systemd
sed -e '/ExecStart/ s/^#*/#/' -i /usr/lib/systemd/system/docker.service
vi /usr/lib/systemd/system/docker.service
##Add lines below: ExecStart=/usr/bin/dockerd --exec-opt native.cgroupdriver=systemd
##Check for cgroup-driver
docker info | grep -i 'cgroup driver'


## start services:

       - systemctl daemon-reload
       - systemctl start docker
       - systemctl enable docker
       - systemctl start kubelet
       - systemctl enable kubelet

================  Kubernetes Cluster Initialization ===========================
=========Run this initialization on master =================
#Master to initialize kubernetes cluster

kubeadm init --apiserver-advertise-address=192.168.56.10 --pod-network-cidr=10.244.0.0/16

================== make note of Join command that you will get after kubeadm init command ran successfully ========================

 To start using your cluster, you need to run the following as a regular user:
  
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.56.10:6443 --token 5s64mv.60wmxu0gmfvwvf4g --discovery-token-ca-cert-hash sha256:26a784742e6304110d46c053c7f25833141c96c8542878fdf52ffdab33726c2b



==================================+++++++++++++++++++++++++==============================================
###-----#### deploy the flannel network to the kubernetes cluster using the kubectl command###-----###
## Kubernetes pod network 


kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

=======================================================================================================================

# Now check kubernetes nodes for running/ready 
kubectl get nodes 
kubectl  get  pods --all-namespaces -o wide



==============================================  Join Nodes in Kubernetes cluster =======================================================

kubeadm join 192.168.56.10:6443 --token nb8cru.9ksspq00hihlczz3 --discovery-token-ca-cert-hash sha256:5a822cc1d034226826dff30bfdc63f04e078afb7ba1eadae0f6a2d1ecb51c67d

___________________

## if you are join new nodes in existing cluster the above token get expired after 24 hours. As kubeadm init creates an initial token with a 24-hour TTL
To regenerate the join command with new token:

kubeadm token create --print-join-command

========================================================================================================================================

# Testing Create First Pod

- Login to the 'master' server and create new deployment named 'nginx' using the kubectl command.
kubectl create deployment nginx --image=nginx

-To see details of the 'nginx' deployment sepcification, run the following command.
kubectl describe deployment nginx

- we will expose the nginx pod accessible via the internet. And we need to create new service NodePort for this
kubectl create service nodeport nginx --tcp=80:80

- Make sure there is no error. Now check the nginx service nodeport and IP using the kubectl command below.
kubectl get pods
kubectl get svc 

- Now test by accessing service:
curl node1:30590
curl node2:30590

- Also try to access through web browser
Master_server_ip:  192.168.56.10:30590
Node1: 192.168.56.20:30590
Node2: 192.168.56.30:30590

- 